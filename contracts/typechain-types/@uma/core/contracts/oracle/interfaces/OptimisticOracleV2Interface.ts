/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace OptimisticOracleV2Interface {
  export type RequestSettingsStruct = {
    eventBased: PromiseOrValue<boolean>;
    refundOnDispute: PromiseOrValue<boolean>;
    callbackOnPriceProposed: PromiseOrValue<boolean>;
    callbackOnPriceDisputed: PromiseOrValue<boolean>;
    callbackOnPriceSettled: PromiseOrValue<boolean>;
    bond: PromiseOrValue<BigNumberish>;
    customLiveness: PromiseOrValue<BigNumberish>;
  };

  export type RequestSettingsStructOutput = [
    boolean,
    boolean,
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    eventBased: boolean;
    refundOnDispute: boolean;
    callbackOnPriceProposed: boolean;
    callbackOnPriceDisputed: boolean;
    callbackOnPriceSettled: boolean;
    bond: BigNumber;
    customLiveness: BigNumber;
  };

  export type RequestStruct = {
    proposer: PromiseOrValue<string>;
    disputer: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
    settled: PromiseOrValue<boolean>;
    requestSettings: OptimisticOracleV2Interface.RequestSettingsStruct;
    proposedPrice: PromiseOrValue<BigNumberish>;
    resolvedPrice: PromiseOrValue<BigNumberish>;
    expirationTime: PromiseOrValue<BigNumberish>;
    reward: PromiseOrValue<BigNumberish>;
    finalFee: PromiseOrValue<BigNumberish>;
  };

  export type RequestStructOutput = [
    string,
    string,
    string,
    boolean,
    OptimisticOracleV2Interface.RequestSettingsStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    proposer: string;
    disputer: string;
    currency: string;
    settled: boolean;
    requestSettings: OptimisticOracleV2Interface.RequestSettingsStructOutput;
    proposedPrice: BigNumber;
    resolvedPrice: BigNumber;
    expirationTime: BigNumber;
    reward: BigNumber;
    finalFee: BigNumber;
  };
}

export interface OptimisticOracleV2InterfaceInterface extends utils.Interface {
  functions: {
    "ancillaryBytesLimit()": FunctionFragment;
    "defaultLiveness()": FunctionFragment;
    "disputePrice(address,bytes32,uint256,bytes)": FunctionFragment;
    "disputePriceFor(address,address,bytes32,uint256,bytes)": FunctionFragment;
    "finder()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getRequest(address,bytes32,uint256,bytes)": FunctionFragment;
    "getState(address,bytes32,uint256,bytes)": FunctionFragment;
    "hasPrice(address,bytes32,uint256,bytes)": FunctionFragment;
    "proposePrice(address,bytes32,uint256,bytes,int256)": FunctionFragment;
    "proposePriceFor(address,address,bytes32,uint256,bytes,int256)": FunctionFragment;
    "requestPrice(bytes32,uint256,bytes,address,uint256)": FunctionFragment;
    "requests(bytes32)": FunctionFragment;
    "setBond(bytes32,uint256,bytes,uint256)": FunctionFragment;
    "setCallbacks(bytes32,uint256,bytes,bool,bool,bool)": FunctionFragment;
    "setCustomLiveness(bytes32,uint256,bytes,uint256)": FunctionFragment;
    "setEventBased(bytes32,uint256,bytes)": FunctionFragment;
    "setRefundOnDispute(bytes32,uint256,bytes)": FunctionFragment;
    "settle(address,bytes32,uint256,bytes)": FunctionFragment;
    "settleAndGetPrice(bytes32,uint256,bytes)": FunctionFragment;
    "stampAncillaryData(bytes,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ancillaryBytesLimit"
      | "defaultLiveness"
      | "disputePrice"
      | "disputePriceFor"
      | "finder"
      | "getCurrentTime"
      | "getRequest"
      | "getState"
      | "hasPrice"
      | "proposePrice"
      | "proposePriceFor"
      | "requestPrice"
      | "requests"
      | "setBond"
      | "setCallbacks"
      | "setCustomLiveness"
      | "setEventBased"
      | "setRefundOnDispute"
      | "settle"
      | "settleAndGetPrice"
      | "stampAncillaryData"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ancillaryBytesLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultLiveness",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disputePrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disputePriceFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getState",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposePrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposePriceFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrice",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBond",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallbacks",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomLiveness",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setEventBased",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefundOnDispute",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAndGetPrice",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stampAncillaryData",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ancillaryBytesLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputePriceFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposePriceFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBond", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCallbacks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomLiveness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEventBased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefundOnDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleAndGetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stampAncillaryData",
    data: BytesLike
  ): Result;

  events: {
    "DisputePrice(address,address,address,bytes32,uint256,bytes,int256)": EventFragment;
    "ProposePrice(address,address,bytes32,uint256,bytes,int256,uint256,address)": EventFragment;
    "RequestPrice(address,bytes32,uint256,bytes,address,uint256,uint256)": EventFragment;
    "Settle(address,address,address,bytes32,uint256,bytes,int256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DisputePrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposePrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
}

export interface DisputePriceEventObject {
  requester: string;
  proposer: string;
  disputer: string;
  identifier: string;
  timestamp: BigNumber;
  ancillaryData: string;
  proposedPrice: BigNumber;
}
export type DisputePriceEvent = TypedEvent<
  [string, string, string, string, BigNumber, string, BigNumber],
  DisputePriceEventObject
>;

export type DisputePriceEventFilter = TypedEventFilter<DisputePriceEvent>;

export interface ProposePriceEventObject {
  requester: string;
  proposer: string;
  identifier: string;
  timestamp: BigNumber;
  ancillaryData: string;
  proposedPrice: BigNumber;
  expirationTimestamp: BigNumber;
  currency: string;
}
export type ProposePriceEvent = TypedEvent<
  [string, string, string, BigNumber, string, BigNumber, BigNumber, string],
  ProposePriceEventObject
>;

export type ProposePriceEventFilter = TypedEventFilter<ProposePriceEvent>;

export interface RequestPriceEventObject {
  requester: string;
  identifier: string;
  timestamp: BigNumber;
  ancillaryData: string;
  currency: string;
  reward: BigNumber;
  finalFee: BigNumber;
}
export type RequestPriceEvent = TypedEvent<
  [string, string, BigNumber, string, string, BigNumber, BigNumber],
  RequestPriceEventObject
>;

export type RequestPriceEventFilter = TypedEventFilter<RequestPriceEvent>;

export interface SettleEventObject {
  requester: string;
  proposer: string;
  disputer: string;
  identifier: string;
  timestamp: BigNumber;
  ancillaryData: string;
  price: BigNumber;
  payout: BigNumber;
}
export type SettleEvent = TypedEvent<
  [string, string, string, string, BigNumber, string, BigNumber, BigNumber],
  SettleEventObject
>;

export type SettleEventFilter = TypedEventFilter<SettleEvent>;

export interface OptimisticOracleV2Interface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptimisticOracleV2InterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ancillaryBytesLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    defaultLiveness(overrides?: CallOverrides): Promise<[BigNumber]>;

    disputePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disputePriceFor(
      disputer: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRequest(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[OptimisticOracleV2Interface.RequestStructOutput]>;

    getState(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    hasPrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    proposePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposePriceFor(
      proposer: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestPrice(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        OptimisticOracleV2Interface.RequestSettingsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: OptimisticOracleV2Interface.RequestSettingsStructOutput;
        proposedPrice: BigNumber;
        resolvedPrice: BigNumber;
        expirationTime: BigNumber;
        reward: BigNumber;
        finalFee: BigNumber;
      }
    >;

    setBond(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      bond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCallbacks(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      callbackOnPriceProposed: PromiseOrValue<boolean>,
      callbackOnPriceDisputed: PromiseOrValue<boolean>,
      callbackOnPriceSettled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCustomLiveness(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      customLiveness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEventBased(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRefundOnDispute(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settle(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleAndGetPrice(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stampAncillaryData(
      ancillaryData: PromiseOrValue<BytesLike>,
      requester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

  defaultLiveness(overrides?: CallOverrides): Promise<BigNumber>;

  disputePrice(
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disputePriceFor(
    disputer: PromiseOrValue<string>,
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finder(overrides?: CallOverrides): Promise<string>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getRequest(
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<OptimisticOracleV2Interface.RequestStructOutput>;

  getState(
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  hasPrice(
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  proposePrice(
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    proposedPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposePriceFor(
    proposer: PromiseOrValue<string>,
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    proposedPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestPrice(
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    currency: PromiseOrValue<string>,
    reward: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      OptimisticOracleV2Interface.RequestSettingsStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      proposer: string;
      disputer: string;
      currency: string;
      settled: boolean;
      requestSettings: OptimisticOracleV2Interface.RequestSettingsStructOutput;
      proposedPrice: BigNumber;
      resolvedPrice: BigNumber;
      expirationTime: BigNumber;
      reward: BigNumber;
      finalFee: BigNumber;
    }
  >;

  setBond(
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    bond: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCallbacks(
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    callbackOnPriceProposed: PromiseOrValue<boolean>,
    callbackOnPriceDisputed: PromiseOrValue<boolean>,
    callbackOnPriceSettled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCustomLiveness(
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    customLiveness: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEventBased(
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRefundOnDispute(
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settle(
    requester: PromiseOrValue<string>,
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleAndGetPrice(
    identifier: PromiseOrValue<BytesLike>,
    timestamp: PromiseOrValue<BigNumberish>,
    ancillaryData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stampAncillaryData(
    ancillaryData: PromiseOrValue<BytesLike>,
    requester: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    defaultLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    disputePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disputePriceFor(
      disputer: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<string>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getRequest(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<OptimisticOracleV2Interface.RequestStructOutput>;

    getState(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    hasPrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proposePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposePriceFor(
      proposer: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestPrice(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        OptimisticOracleV2Interface.RequestSettingsStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        proposer: string;
        disputer: string;
        currency: string;
        settled: boolean;
        requestSettings: OptimisticOracleV2Interface.RequestSettingsStructOutput;
        proposedPrice: BigNumber;
        resolvedPrice: BigNumber;
        expirationTime: BigNumber;
        reward: BigNumber;
        finalFee: BigNumber;
      }
    >;

    setBond(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      bond: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCallbacks(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      callbackOnPriceProposed: PromiseOrValue<boolean>,
      callbackOnPriceDisputed: PromiseOrValue<boolean>,
      callbackOnPriceSettled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCustomLiveness(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      customLiveness: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEventBased(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRefundOnDispute(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleAndGetPrice(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stampAncillaryData(
      ancillaryData: PromiseOrValue<BytesLike>,
      requester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "DisputePrice(address,address,address,bytes32,uint256,bytes,int256)"(
      requester?: PromiseOrValue<string> | null,
      proposer?: PromiseOrValue<string> | null,
      disputer?: PromiseOrValue<string> | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      proposedPrice?: null
    ): DisputePriceEventFilter;
    DisputePrice(
      requester?: PromiseOrValue<string> | null,
      proposer?: PromiseOrValue<string> | null,
      disputer?: PromiseOrValue<string> | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      proposedPrice?: null
    ): DisputePriceEventFilter;

    "ProposePrice(address,address,bytes32,uint256,bytes,int256,uint256,address)"(
      requester?: PromiseOrValue<string> | null,
      proposer?: PromiseOrValue<string> | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      proposedPrice?: null,
      expirationTimestamp?: null,
      currency?: null
    ): ProposePriceEventFilter;
    ProposePrice(
      requester?: PromiseOrValue<string> | null,
      proposer?: PromiseOrValue<string> | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      proposedPrice?: null,
      expirationTimestamp?: null,
      currency?: null
    ): ProposePriceEventFilter;

    "RequestPrice(address,bytes32,uint256,bytes,address,uint256,uint256)"(
      requester?: PromiseOrValue<string> | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      currency?: null,
      reward?: null,
      finalFee?: null
    ): RequestPriceEventFilter;
    RequestPrice(
      requester?: PromiseOrValue<string> | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      currency?: null,
      reward?: null,
      finalFee?: null
    ): RequestPriceEventFilter;

    "Settle(address,address,address,bytes32,uint256,bytes,int256,uint256)"(
      requester?: PromiseOrValue<string> | null,
      proposer?: PromiseOrValue<string> | null,
      disputer?: PromiseOrValue<string> | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      price?: null,
      payout?: null
    ): SettleEventFilter;
    Settle(
      requester?: PromiseOrValue<string> | null,
      proposer?: PromiseOrValue<string> | null,
      disputer?: PromiseOrValue<string> | null,
      identifier?: null,
      timestamp?: null,
      ancillaryData?: null,
      price?: null,
      payout?: null
    ): SettleEventFilter;
  };

  estimateGas: {
    ancillaryBytesLimit(overrides?: CallOverrides): Promise<BigNumber>;

    defaultLiveness(overrides?: CallOverrides): Promise<BigNumber>;

    disputePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disputePriceFor(
      disputer: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getRequest(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getState(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposePriceFor(
      proposer: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestPrice(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBond(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      bond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCallbacks(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      callbackOnPriceProposed: PromiseOrValue<boolean>,
      callbackOnPriceDisputed: PromiseOrValue<boolean>,
      callbackOnPriceSettled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCustomLiveness(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      customLiveness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEventBased(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRefundOnDispute(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settle(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleAndGetPrice(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stampAncillaryData(
      ancillaryData: PromiseOrValue<BytesLike>,
      requester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ancillaryBytesLimit(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultLiveness(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disputePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disputePriceFor(
      disputer: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequest(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getState(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposePrice(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposePriceFor(
      proposer: PromiseOrValue<string>,
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      proposedPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestPrice(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      currency: PromiseOrValue<string>,
      reward: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBond(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      bond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCallbacks(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      callbackOnPriceProposed: PromiseOrValue<boolean>,
      callbackOnPriceDisputed: PromiseOrValue<boolean>,
      callbackOnPriceSettled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCustomLiveness(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      customLiveness: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEventBased(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRefundOnDispute(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      requester: PromiseOrValue<string>,
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleAndGetPrice(
      identifier: PromiseOrValue<BytesLike>,
      timestamp: PromiseOrValue<BigNumberish>,
      ancillaryData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stampAncillaryData(
      ancillaryData: PromiseOrValue<BytesLike>,
      requester: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
