/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IERC721Rent {
  export type RentConditionsStruct = {
    allowed: PromiseOrValue<boolean>;
    pricePerSecond: PromiseOrValue<BigNumberish>;
    collateralPerSecond: PromiseOrValue<BigNumberish>;
    currentRentingToken: PromiseOrValue<BigNumberish>;
    sourceERC721Contract: PromiseOrValue<string>;
    sourceTokenId: PromiseOrValue<BigNumberish>;
  };

  export type RentConditionsStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    allowed: boolean;
    pricePerSecond: BigNumber;
    collateralPerSecond: BigNumber;
    currentRentingToken: BigNumber;
    sourceERC721Contract: string;
    sourceTokenId: BigNumber;
  };

  export type RentStruct = {
    startTs: PromiseOrValue<BigNumberish>;
    endTs: PromiseOrValue<BigNumberish>;
    sourceERC721Contract: PromiseOrValue<string>;
    sourceTokenId: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    collateral: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type RentStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    startTs: BigNumber;
    endTs: BigNumber;
    sourceERC721Contract: string;
    sourceTokenId: BigNumber;
    price: BigNumber;
    collateral: BigNumber;
    status: number;
  };
}

export interface IERC721RentInterface extends utils.Interface {
  functions: {
    "allowRent(address,uint256,bool,uint256,uint256)": FunctionFragment;
    "finalizeRent(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getRentConditions(address,uint256)": FunctionFragment;
    "getTokenData(uint256)": FunctionFragment;
    "listRentConditions()": FunctionFragment;
    "rent(address,uint256,uint256)": FunctionFragment;
    "resolveDispute(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowRent"
      | "finalizeRent"
      | "getBalance"
      | "getRentConditions"
      | "getTokenData"
      | "listRentConditions"
      | "rent"
      | "resolveDispute"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowRent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeRent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRentConditions",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "listRentConditions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rent",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allowRent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeRent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRentConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listRentConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface IERC721Rent extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC721RentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowRent(
      erc721Contract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      allow: PromiseOrValue<boolean>,
      pricePerSecond: PromiseOrValue<BigNumberish>,
      collateralPerSecond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeRent(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRentConditions(
      erc721Contract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IERC721Rent.RentConditionsStructOutput]>;

    getTokenData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IERC721Rent.RentStructOutput]>;

    listRentConditions(
      overrides?: CallOverrides
    ): Promise<[IERC721Rent.RentConditionsStructOutput[]]>;

    rent(
      erc721Contract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveDispute(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowRent(
    erc721Contract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    allow: PromiseOrValue<boolean>,
    pricePerSecond: PromiseOrValue<BigNumberish>,
    collateralPerSecond: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeRent(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getRentConditions(
    erc721Contract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IERC721Rent.RentConditionsStructOutput>;

  getTokenData(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IERC721Rent.RentStructOutput>;

  listRentConditions(
    overrides?: CallOverrides
  ): Promise<IERC721Rent.RentConditionsStructOutput[]>;

  rent(
    erc721Contract: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveDispute(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowRent(
      erc721Contract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      allow: PromiseOrValue<boolean>,
      pricePerSecond: PromiseOrValue<BigNumberish>,
      collateralPerSecond: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeRent(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRentConditions(
      erc721Contract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IERC721Rent.RentConditionsStructOutput>;

    getTokenData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IERC721Rent.RentStructOutput>;

    listRentConditions(
      overrides?: CallOverrides
    ): Promise<IERC721Rent.RentConditionsStructOutput[]>;

    rent(
      erc721Contract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resolveDispute(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allowRent(
      erc721Contract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      allow: PromiseOrValue<boolean>,
      pricePerSecond: PromiseOrValue<BigNumberish>,
      collateralPerSecond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeRent(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRentConditions(
      erc721Contract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listRentConditions(overrides?: CallOverrides): Promise<BigNumber>;

    rent(
      erc721Contract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveDispute(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowRent(
      erc721Contract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      allow: PromiseOrValue<boolean>,
      pricePerSecond: PromiseOrValue<BigNumberish>,
      collateralPerSecond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeRent(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRentConditions(
      erc721Contract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenData(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listRentConditions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rent(
      erc721Contract: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveDispute(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
