/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IERC721Rent,
  IERC721RentInterface,
} from "../../../contracts/Interfaces.sol/IERC721Rent";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "erc721Contract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "allow",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "pricePerSecond",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collateralPerSecond",
        type: "uint256",
      },
    ],
    name: "allowRent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "finalizeRent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "erc721Contract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getRentConditions",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "allowed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "pricePerSecond",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "collateralPerSecond",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "currentRentingToken",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "sourceERC721Contract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "sourceTokenId",
            type: "uint256",
          },
        ],
        internalType: "struct IERC721Rent.RentConditions",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getTokenData",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startTs",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTs",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "sourceERC721Contract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "sourceTokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "collateral",
            type: "uint256",
          },
          {
            internalType: "enum IERC721Rent.RentStatus",
            name: "status",
            type: "uint8",
          },
        ],
        internalType: "struct IERC721Rent.Rent",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "listRentConditions",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "allowed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "pricePerSecond",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "collateralPerSecond",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "currentRentingToken",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "sourceERC721Contract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "sourceTokenId",
            type: "uint256",
          },
        ],
        internalType: "struct IERC721Rent.RentConditions[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC721",
        name: "erc721Contract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "rent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "resolveDispute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IERC721Rent__factory {
  static readonly abi = _abi;
  static createInterface(): IERC721RentInterface {
    return new utils.Interface(_abi) as IERC721RentInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IERC721Rent {
    return new Contract(address, _abi, signerOrProvider) as IERC721Rent;
  }
}
