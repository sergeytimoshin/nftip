{
  "address": "0xcC052B4d8BCc475DCeb7acbB27bf2DEdC2B659Ad",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "rentIsValid",
          "type": "bool"
        }
      ],
      "name": "DisputeSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "erc721Contract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "pricePerSecond",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralPerSecond",
          "type": "uint256"
        }
      ],
      "name": "allowRent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "finalizeRent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "erc721Contract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRentConditions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "allowed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "pricePerSecond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralPerSecond",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC721Rent.RentConditions",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "startTs",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTs",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sourceERC721Contract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sourceTokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "enum IERC721Rent.RentStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IERC721Rent.Rent",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "erc721Contract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "rent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "resolveDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd391cd9c4777da2c126b3d6f192941642f0d70542cab166922a56ed5561f9747",
  "receipt": {
    "to": null,
    "from": "0xA206a943708aA43d85c1BCcf38508d8217f50Ec1",
    "contractAddress": "0xcC052B4d8BCc475DCeb7acbB27bf2DEdC2B659Ad",
    "transactionIndex": 18,
    "gasUsed": "3674976",
    "logsBloom": "0x
    "blockHash": "0x5708731d2ac5d273e89f5e2095e46d6b5f0fddab482c2e08b20e82bf931045b0",
    "transactionHash": "0xd391cd9c4777da2c126b3d6f192941642f0d70542cab166922a56ed5561f9747",
    "logs": [],
    "blockNumber": 7604660,
    "cumulativeGasUsed": "5904120",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE5f912Bc7347F3075f13eAF9D0f5D47F5074bA6b"
  ],
  "numDeployments": 1,
  "solcInputHash": "c05a2a29766fff7aac1c4ae6cf8776e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"rentIsValid\",\"type\":\"bool\"}],\"name\":\"DisputeSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralPerSecond\",\"type\":\"uint256\"}],\"name\":\"allowRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"finalizeRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRentConditions\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"pricePerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralPerSecond\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC721Rent.RentConditions\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sourceERC721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"enum IERC721Rent.RentStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IERC721Rent.Rent\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"erc721Contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"rent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721Rent.sol\":\"ERC721Rent\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ERC721Rent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./Interfaces.sol\\\";\\n\\ncontract ERC721Rent is ERC721, IERC721Rent {\\n    using Counters for Counters.Counter;\\n\\n\\n    event DisputeSettled(uint256 tokenId, bool rentIsValid);\\n\\n    Counters.Counter private _tokenIds;\\n\\n    // Source contract addr => Source token id => ...\\n    mapping(address => mapping(uint256 => RentConditions)) private _rentConditions;\\n    mapping(address => mapping(uint256 => uint256)) private _currentRentingToken;\\n\\n    // Balances availible for withdrawal\\n    mapping(address => uint256) private _balances;\\n\\n    // tokenID => token data\\n    mapping(uint256 => Rent) private _tokenData;\\n    \\n    // Dispute resolver\\n    IDisputeResolver _resolver;\\n\\n    constructor(address resolver) ERC721(\\\"ERC721Wrapper\\\", \\\"ECW\\\") {\\n        _resolver = IDisputeResolver(resolver);\\n    }\\n\\n    // allow rent for an owned token\\n    function allowRent(IERC721 erc721Contract, uint256 tokenId, bool allow, uint256 pricePerSecond, uint256 collateralPerSecond) external {\\n        // TODO: Check approval as well\\n        require(erc721Contract.ownerOf(tokenId) == msg.sender, \\\"not owner\\\");\\n        require(_currentRentingToken[address(erc721Contract)][tokenId] == 0, \\\"cant change while rented\\\");\\n        \\n        _rentConditions[address(erc721Contract)][tokenId] = RentConditions(allow, pricePerSecond, collateralPerSecond);\\n    }\\n\\n    // check if a specific token was added as rentable\\n    function getRentConditions(IERC721 erc721Contract, uint256 tokenId) external view returns (RentConditions memory) {\\n        return _rentConditions[address(erc721Contract)][tokenId];\\n    }\\n\\n    // mint a token by renting out an availible token\\n    function rent(IERC721 erc721Contract, uint256 tokenId, uint256 duration) external payable returns (uint256) {\\n        // FIX: check if owner gave permission to rent\\n        // require(erc721Contract.ownerOf(tokenId) == msg.sender, \\\"not owner\\\");\\n        \\n        RentConditions storage rentConditions = _rentConditions[address(erc721Contract)][tokenId];\\n\\n        require(rentConditions.allowed == true, \\\"cant rent this token\\\");\\n        require(_currentRentingToken[address(erc721Contract)][tokenId] == 0, \\\"already rented\\\");\\n        uint256 price = duration * rentConditions.pricePerSecond;\\n        uint256 collateral = duration * rentConditions.collateralPerSecond;\\n        require(msg.value >= price + collateral, \\\"msg.value too low\\\");\\n        \\n        _tokenIds.increment();\\n        uint256 newItemId = _tokenIds.current();\\n\\n        // update state\\n        Rent memory current = Rent(block.timestamp, block.timestamp + duration, address(erc721Contract), tokenId, price, collateral, RentStatus.STARTED);\\n        _currentRentingToken[address(erc721Contract)][tokenId] = newItemId;\\n        _tokenData[newItemId] = current;\\n\\n        // Mint token\\n        _mint(msg.sender, tokenId);\\n\\n        return newItemId;\\n    }\\n\\n    // Commit rent and allow eth to be withdrawn by owner\\n    function finalizeRent(uint256 tokenId) external {\\n        Rent storage tokenData = _tokenData[tokenId];\\n        require(tokenData.sourceERC721Contract != address(0), \\\"token does not exist\\\");\\n        require(tokenData.status == RentStatus.STARTED, \\\"already finished\\\");\\n        require(block.timestamp > tokenData.endTs, \\\"rent not finished yet\\\");\\n\\n        // anyone can finalize the rent\\n        // address tokenOwner = ERC721(tokenData.sourceERC721Contract).ownerOf(tokenData.sourceTokenId);\\n        // require(tokenOwner == msg.sender, \\\"not owner\\\");\\n\\n        tokenData.status = RentStatus.FINISHED;\\n        _currentRentingToken[tokenData.sourceERC721Contract][tokenData.sourceTokenId] = 0;\\n\\n        address tokenOwner = ERC721(tokenData.sourceERC721Contract).ownerOf(tokenData.sourceTokenId);\\n\\n        _balances[tokenOwner] += tokenData.price;\\n\\n        // start rent validity dispute\\n        _resolver.callDispute(tokenId);\\n    }\\n\\n    // Designate collateral based on dispute resolution\\n    function resolveDispute(uint256 tokenId) external {\\n        Rent storage tokenData = _tokenData[tokenId];\\n        require(tokenData.sourceERC721Contract != address(0), \\\"token does not exist\\\");\\n        require(tokenData.status == RentStatus.FINISHED, \\\"not in finished status\\\");\\n        \\n        bool rentIsValid = _resolver.checkDispute(tokenId);\\n        if (rentIsValid) {\\n            address tokenRenter = ownerOf(tokenId);\\n            _balances[tokenRenter] += tokenData.collateral;\\n        } else {\\n            address tokenOwner = ERC721(tokenData.sourceERC721Contract).ownerOf(tokenData.sourceTokenId);\\n            _balances[tokenOwner] += tokenData.collateral;\\n        }\\n        emit DisputeSettled(tokenId, rentIsValid);\\n\\n        tokenData.status = RentStatus.COLLATERAL_ASSIGNED;\\n    }\\n\\n    // get metadata associated with a token\\n    function getTokenData(uint256 tokenId) external view returns (Rent memory) {\\n        return _tokenData[tokenId];\\n    }\\n    \\n    // check current balance\\n    function getBalance() external view returns (uint256) {\\n        return _balances[msg.sender];\\n    }\\n\\n    // Withdraw credits\\n    function withdraw() external {\\n        require(_balances[msg.sender] > 0, \\\"empty balance\\\");\\n        uint256 balance = _balances[msg.sender];\\n        _balances[msg.sender] = 0;\\n        bool sent = payable(msg.sender).send(balance);\\n        require(sent, \\\"failed to withdraw\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6702ed3c799f3588d72c0fcc44e6842c18499395a01e0e560e334d6e12b21c10\",\"license\":\"UNLICENSED\"},\"contracts/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IERC721Rent {\\n    \\n    struct RentConditions {\\n        bool            allowed;\\n        uint256         pricePerSecond;\\n        uint256         collateralPerSecond;\\n    }\\n\\n    enum RentStatus{ UNKNOWN, STARTED, FINISHED, COLLATERAL_ASSIGNED }\\n\\n    struct Rent {\\n        uint256    startTs;\\n        uint256    endTs;\\n        address    sourceERC721Contract;\\n        uint256    sourceTokenId;\\n        uint256    price;\\n        uint256    collateral;\\n        RentStatus status;\\n    }\\n\\n    function getTokenData(uint256 tokenId) external view returns (Rent memory);\\n    function getRentConditions(IERC721 erc721Contract, uint256 tokenId) external view returns (RentConditions memory);\\n\\n    function allowRent(IERC721 erc721Contract, uint256 tokenId, bool allow, uint256 pricePerSecond, uint256 collateralPerSecond) external;\\n    function rent(IERC721 erc721Contract, uint256 tokenId, uint256 duration) external payable returns (uint256);\\n    function finalizeRent(uint256 tokenId) external;\\n    function resolveDispute(uint256 tokenId) external;\\n\\n    function getBalance() external view returns (uint256);\\n    function withdraw() external;\\n}\\n\\ninterface IDisputeResolver {\\n    function callDispute(uint256 tokenId) external;\\n    function checkDispute(uint256 tokenId) external returns (bool rentIsValid);\\n}\\n\\n\",\"keccak256\":\"0xfb0d9efbfd4409bb8ccff0019adf23de4fc87365a08c73aa01957737cfe9e41e\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200434c3803806200434c833981810160405281019062000037919062000239565b6040518060400160405280600d81526020017f45524337323157726170706572000000000000000000000000000000000000008152506040518060400160405280600381526020017f45435700000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb9291906200011f565b508060019080519060200190620000d49291906200011f565b50505080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620002d0565b8280546200012d906200029a565b90600052602060002090601f0160209004810192826200015157600085556200019d565b82601f106200016c57805160ff19168380011785556200019d565b828001600101855582156200019d579182015b828111156200019c5782518255916020019190600101906200017f565b5b509050620001ac9190620001b0565b5090565b5b80821115620001cb576000816000905550600101620001b1565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200020182620001d4565b9050919050565b6200021381620001f4565b81146200021f57600080fd5b50565b600081519050620002338162000208565b92915050565b600060208284031215620002525762000251620001cf565b5b6000620002628482850162000222565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002b357607f821691505b60208210811415620002ca57620002c96200026b565b5b50919050565b61406c80620002e06000396000f3fe60806040526004361061012a5760003560e01c80636c5cad48116100ab578063b88d4fde1161006f578063b88d4fde14610409578063c2b7b86814610432578063c86c89211461045b578063c87b56dd14610484578063e9679937146104c1578063e985e9c5146104ea5761012a565b80636c5cad48146102fe57806370a082311461033b57806395d89b4114610378578063a22cb465146103a3578063b09afec1146103cc5761012a565b806323b872dd116100f257806323b872dd146102285780633ccfd60b1461025157806342842e0e146102685780634dc32a18146102915780636352211e146102c15761012a565b806301ffc9a71461012f57806306fdde031461016c578063081812fc14610197578063095ea7b3146101d457806312065fe0146101fd575b600080fd5b34801561013b57600080fd5b506101566004803603810190610151919061292a565b610527565b6040516101639190612972565b60405180910390f35b34801561017857600080fd5b50610181610609565b60405161018e9190612a26565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b99190612a7e565b61069b565b6040516101cb9190612aec565b60405180910390f35b3480156101e057600080fd5b506101fb60048036038101906101f69190612b33565b6106e1565b005b34801561020957600080fd5b506102126107f9565b60405161021f9190612b82565b60405180910390f35b34801561023457600080fd5b5061024f600480360381019061024a9190612b9d565b610840565b005b34801561025d57600080fd5b506102666108a0565b005b34801561027457600080fd5b5061028f600480360381019061028a9190612b9d565b610a28565b005b6102ab60048036038101906102a69190612c2e565b610a48565b6040516102b89190612b82565b60405180910390f35b3480156102cd57600080fd5b506102e860048036038101906102e39190612a7e565b610daf565b6040516102f59190612aec565b60405180910390f35b34801561030a57600080fd5b5061032560048036038101906103209190612c81565b610e61565b6040516103329190612d21565b60405180910390f35b34801561034757600080fd5b50610362600480360381019061035d9190612d3c565b610efb565b60405161036f9190612b82565b60405180910390f35b34801561038457600080fd5b5061038d610fb3565b60405161039a9190612a26565b60405180910390f35b3480156103af57600080fd5b506103ca60048036038101906103c59190612d95565b611045565b005b3480156103d857600080fd5b506103f360048036038101906103ee9190612a7e565b61105b565b6040516104009190612ee9565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b9190613039565b61114b565b005b34801561043e57600080fd5b5061045960048036038101906104549190612a7e565b6111ad565b005b34801561046757600080fd5b50610482600480360381019061047d9190612a7e565b611570565b005b34801561049057600080fd5b506104ab60048036038101906104a69190612a7e565b611925565b6040516104b89190612a26565b60405180910390f35b3480156104cd57600080fd5b506104e860048036038101906104e391906130bc565b61198d565b005b3480156104f657600080fd5b50610511600480360381019061050c9190613137565b611bc1565b60405161051e9190612972565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105f257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610602575061060182611c55565b5b9050919050565b606060008054610618906131a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610644906131a6565b80156106915780601f1061066657610100808354040283529160200191610691565b820191906000526020600020905b81548152906001019060200180831161067457829003601f168201915b5050505050905090565b60006106a682611cbf565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106ec82610daf565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561075d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107549061324a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661077c611d0a565b73ffffffffffffffffffffffffffffffffffffffff1614806107ab57506107aa816107a5611d0a565b611bc1565b5b6107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e1906132dc565b60405180910390fd5b6107f48383611d12565b505050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b61085161084b611d0a565b82611dcb565b610890576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108879061336e565b60405180910390fd5b61089b838383611e60565b505050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610922576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610919906133da565b60405180910390fd5b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050905080610a24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1b90613446565b60405180910390fd5b5050565b610a438383836040518060200160405280600081525061114b565b505050565b600080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000209050600115158160000160009054906101000a900460ff16151514610af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aec906134b2565b60405180910390fd5b6000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000205414610b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7f9061351e565b60405180910390fd5b6000816001015484610b9a919061356d565b90506000826002015485610bae919061356d565b90508082610bbc91906135c7565b341015610bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf590613669565b60405180910390fd5b610c0860066120c7565b6000610c1460066120dd565b905060006040518060e001604052804281526020018842610c3591906135c7565b81526020018a73ffffffffffffffffffffffffffffffffffffffff16815260200189815260200185815260200184815260200160016003811115610c7c57610c7b612de4565b5b815250905081600860008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000208190555080600a6000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690836003811115610d8e57610d8d612de4565b5b0217905550905050610da033896120eb565b81955050505050509392505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4f906136d5565b60405180910390fd5b80915050919050565b610e69612836565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1615151515815260200160018201548152602001600282015481525050905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6390613767565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610fc2906131a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610fee906131a6565b801561103b5780601f106110105761010080835404028352916020019161103b565b820191906000526020600020905b81548152906001019060200180831161101e57829003601f168201915b5050505050905090565b611057611050611d0a565b83836122c5565b5050565b611063612859565b600a60008381526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff16600381111561112e5761112d612de4565b5b60038111156111405761113f612de4565b5b815250509050919050565b61115c611156611d0a565b83611dcb565b61119b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111929061336e565b60405180910390fd5b6111a784848484612432565b50505050565b6000600a60008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124f906137d3565b60405180910390fd5b6002600381111561126c5761126b612de4565b5b8160060160009054906101000a900460ff1660038111156112905761128f612de4565b5b146112d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c79061383f565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5a21a2e846040518263ffffffff1660e01b815260040161132d9190612b82565b602060405180830381600087803b15801561134757600080fd5b505af115801561135b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137f9190613874565b905080156113f457600061139284610daf565b90508260050154600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113e791906135c7565b9250508190555050611505565b60008260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e84600301546040518263ffffffff1660e01b81526004016114579190612b82565b60206040518083038186803b15801561146f57600080fd5b505afa158015611483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a791906138b6565b90508260050154600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114fc91906135c7565b92505081905550505b7faa76612075dcf5624c76b21b3b0f6babbeee4e6b6197fb4fb4a2a5654724812a83826040516115369291906138e3565b60405180910390a160038260060160006101000a81548160ff0219169083600381111561156657611565612de4565b5b0217905550505050565b6000600a60008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561161b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611612906137d3565b60405180910390fd5b6001600381111561162f5761162e612de4565b5b8160060160009054906101000a900460ff16600381111561165357611652612de4565b5b14611693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168a90613958565b60405180910390fd5b806001015442116116d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d0906139c4565b60405180910390fd5b60028160060160006101000a81548160ff0219169083600381111561170157611700612de4565b5b02179055506000600860008360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836003015481526020019081526020016000208190555060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e83600301546040518263ffffffff1660e01b81526004016117e79190612b82565b60206040518083038186803b1580156117ff57600080fd5b505afa158015611813573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183791906138b6565b90508160040154600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461188c91906135c7565b92505081905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd9db427846040518263ffffffff1660e01b81526004016118ee9190612b82565b600060405180830381600087803b15801561190857600080fd5b505af115801561191c573d6000803e3d6000fd5b50505050505050565b606061193082611cbf565b600061193a61248e565b9050600081511161195a5760405180602001604052806000815250611985565b80611964846124a5565b604051602001611975929190613a20565b6040516020818303038152906040525b915050919050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b81526004016119dd9190612b82565b60206040518083038186803b1580156119f557600080fd5b505afa158015611a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2d91906138b6565b73ffffffffffffffffffffffffffffffffffffffff1614611a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7a90613a90565b60405180910390fd5b6000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000205414611b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0d90613afc565b60405180910390fd5b6040518060600160405280841515815260200183815260200182815250600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155604082015181600201559050505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611cc881612606565b611d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cfe906136d5565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d8583610daf565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611dd783610daf565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611e195750611e188185611bc1565b5b80611e5757508373ffffffffffffffffffffffffffffffffffffffff16611e3f8461069b565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611e8082610daf565b73ffffffffffffffffffffffffffffffffffffffff1614611ed6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecd90613b8e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3d90613c20565b60405180910390fd5b611f51838383612672565b611f5c600082611d12565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fac9190613c40565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461200391906135c7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120c2838383612677565b505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561215b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215290613cc0565b60405180910390fd5b61216481612606565b156121a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219b90613d2c565b60405180910390fd5b6121b060008383612672565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461220091906135c7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46122c160008383612677565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232b90613d98565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516124259190612972565b60405180910390a3505050565b61243d848484611e60565b6124498484848461267c565b612488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247f90613e2a565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060008214156124ed576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612601565b600082905060005b6000821461251f57808061250890613e4a565b915050600a826125189190613ec2565b91506124f5565b60008167ffffffffffffffff81111561253b5761253a612f0e565b5b6040519080825280601f01601f19166020018201604052801561256d5781602001600182028036833780820191505090505b5090505b600085146125fa576001826125869190613c40565b9150600a856125959190613ef3565b60306125a191906135c7565b60f81b8183815181106125b7576125b6613f24565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856125f39190613ec2565b9450612571565b8093505050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b600061269d8473ffffffffffffffffffffffffffffffffffffffff16612813565b15612806578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026126c6611d0a565b8786866040518563ffffffff1660e01b81526004016126e89493929190613fa8565b602060405180830381600087803b15801561270257600080fd5b505af192505050801561273357506040513d601f19601f820116820180604052508101906127309190614009565b60015b6127b6573d8060008114612763576040519150601f19603f3d011682016040523d82523d6000602084013e612768565b606091505b506000815114156127ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a590613e2a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061280b565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b604051806060016040528060001515815260200160008152602001600081525090565b6040518060e001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600060038111156128b8576128b7612de4565b5b81525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612907816128d2565b811461291257600080fd5b50565b600081359050612924816128fe565b92915050565b6000602082840312156129405761293f6128c8565b5b600061294e84828501612915565b91505092915050565b60008115159050919050565b61296c81612957565b82525050565b60006020820190506129876000830184612963565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156129c75780820151818401526020810190506129ac565b838111156129d6576000848401525b50505050565b6000601f19601f8301169050919050565b60006129f88261298d565b612a028185612998565b9350612a128185602086016129a9565b612a1b816129dc565b840191505092915050565b60006020820190508181036000830152612a4081846129ed565b905092915050565b6000819050919050565b612a5b81612a48565b8114612a6657600080fd5b50565b600081359050612a7881612a52565b92915050565b600060208284031215612a9457612a936128c8565b5b6000612aa284828501612a69565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ad682612aab565b9050919050565b612ae681612acb565b82525050565b6000602082019050612b016000830184612add565b92915050565b612b1081612acb565b8114612b1b57600080fd5b50565b600081359050612b2d81612b07565b92915050565b60008060408385031215612b4a57612b496128c8565b5b6000612b5885828601612b1e565b9250506020612b6985828601612a69565b9150509250929050565b612b7c81612a48565b82525050565b6000602082019050612b976000830184612b73565b92915050565b600080600060608486031215612bb657612bb56128c8565b5b6000612bc486828701612b1e565b9350506020612bd586828701612b1e565b9250506040612be686828701612a69565b9150509250925092565b6000612bfb82612acb565b9050919050565b612c0b81612bf0565b8114612c1657600080fd5b50565b600081359050612c2881612c02565b92915050565b600080600060608486031215612c4757612c466128c8565b5b6000612c5586828701612c19565b9350506020612c6686828701612a69565b9250506040612c7786828701612a69565b9150509250925092565b60008060408385031215612c9857612c976128c8565b5b6000612ca685828601612c19565b9250506020612cb785828601612a69565b9150509250929050565b612cca81612957565b82525050565b612cd981612a48565b82525050565b606082016000820151612cf56000850182612cc1565b506020820151612d086020850182612cd0565b506040820151612d1b6040850182612cd0565b50505050565b6000606082019050612d366000830184612cdf565b92915050565b600060208284031215612d5257612d516128c8565b5b6000612d6084828501612b1e565b91505092915050565b612d7281612957565b8114612d7d57600080fd5b50565b600081359050612d8f81612d69565b92915050565b60008060408385031215612dac57612dab6128c8565b5b6000612dba85828601612b1e565b9250506020612dcb85828601612d80565b9150509250929050565b612dde81612acb565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110612e2457612e23612de4565b5b50565b6000819050612e3582612e13565b919050565b6000612e4582612e27565b9050919050565b612e5581612e3a565b82525050565b60e082016000820151612e716000850182612cd0565b506020820151612e846020850182612cd0565b506040820151612e976040850182612dd5565b506060820151612eaa6060850182612cd0565b506080820151612ebd6080850182612cd0565b5060a0820151612ed060a0850182612cd0565b5060c0820151612ee360c0850182612e4c565b50505050565b600060e082019050612efe6000830184612e5b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f46826129dc565b810181811067ffffffffffffffff82111715612f6557612f64612f0e565b5b80604052505050565b6000612f786128be565b9050612f848282612f3d565b919050565b600067ffffffffffffffff821115612fa457612fa3612f0e565b5b612fad826129dc565b9050602081019050919050565b82818337600083830152505050565b6000612fdc612fd784612f89565b612f6e565b905082815260208101848484011115612ff857612ff7612f09565b5b613003848285612fba565b509392505050565b600082601f8301126130205761301f612f04565b5b8135613030848260208601612fc9565b91505092915050565b60008060008060808587031215613053576130526128c8565b5b600061306187828801612b1e565b945050602061307287828801612b1e565b935050604061308387828801612a69565b925050606085013567ffffffffffffffff8111156130a4576130a36128cd565b5b6130b08782880161300b565b91505092959194509250565b600080600080600060a086880312156130d8576130d76128c8565b5b60006130e688828901612c19565b95505060206130f788828901612a69565b945050604061310888828901612d80565b935050606061311988828901612a69565b925050608061312a88828901612a69565b9150509295509295909350565b6000806040838503121561314e5761314d6128c8565b5b600061315c85828601612b1e565b925050602061316d85828601612b1e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806131be57607f821691505b602082108114156131d2576131d1613177565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613234602183612998565b915061323f826131d8565b604082019050919050565b6000602082019050818103600083015261326381613227565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b60006132c6603e83612998565b91506132d18261326a565b604082019050919050565b600060208201905081810360008301526132f5816132b9565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613358602e83612998565b9150613363826132fc565b604082019050919050565b600060208201905081810360008301526133878161334b565b9050919050565b7f656d7074792062616c616e636500000000000000000000000000000000000000600082015250565b60006133c4600d83612998565b91506133cf8261338e565b602082019050919050565b600060208201905081810360008301526133f3816133b7565b9050919050565b7f6661696c656420746f2077697468647261770000000000000000000000000000600082015250565b6000613430601283612998565b915061343b826133fa565b602082019050919050565b6000602082019050818103600083015261345f81613423565b9050919050565b7f63616e742072656e74207468697320746f6b656e000000000000000000000000600082015250565b600061349c601483612998565b91506134a782613466565b602082019050919050565b600060208201905081810360008301526134cb8161348f565b9050919050565b7f616c72656164792072656e746564000000000000000000000000000000000000600082015250565b6000613508600e83612998565b9150613513826134d2565b602082019050919050565b60006020820190508181036000830152613537816134fb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061357882612a48565b915061358383612a48565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135bc576135bb61353e565b5b828202905092915050565b60006135d282612a48565b91506135dd83612a48565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156136125761361161353e565b5b828201905092915050565b7f6d73672e76616c756520746f6f206c6f77000000000000000000000000000000600082015250565b6000613653601183612998565b915061365e8261361d565b602082019050919050565b6000602082019050818103600083015261368281613646565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006136bf601883612998565b91506136ca82613689565b602082019050919050565b600060208201905081810360008301526136ee816136b2565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613751602983612998565b915061375c826136f5565b604082019050919050565b6000602082019050818103600083015261378081613744565b9050919050565b7f746f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b60006137bd601483612998565b91506137c882613787565b602082019050919050565b600060208201905081810360008301526137ec816137b0565b9050919050565b7f6e6f7420696e2066696e69736865642073746174757300000000000000000000600082015250565b6000613829601683612998565b9150613834826137f3565b602082019050919050565b600060208201905081810360008301526138588161381c565b9050919050565b60008151905061386e81612d69565b92915050565b60006020828403121561388a576138896128c8565b5b60006138988482850161385f565b91505092915050565b6000815190506138b081612b07565b92915050565b6000602082840312156138cc576138cb6128c8565b5b60006138da848285016138a1565b91505092915050565b60006040820190506138f86000830185612b73565b6139056020830184612963565b9392505050565b7f616c72656164792066696e697368656400000000000000000000000000000000600082015250565b6000613942601083612998565b915061394d8261390c565b602082019050919050565b6000602082019050818103600083015261397181613935565b9050919050565b7f72656e74206e6f742066696e6973686564207965740000000000000000000000600082015250565b60006139ae601583612998565b91506139b982613978565b602082019050919050565b600060208201905081810360008301526139dd816139a1565b9050919050565b600081905092915050565b60006139fa8261298d565b613a0481856139e4565b9350613a148185602086016129a9565b80840191505092915050565b6000613a2c82856139ef565b9150613a3882846139ef565b91508190509392505050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000613a7a600983612998565b9150613a8582613a44565b602082019050919050565b60006020820190508181036000830152613aa981613a6d565b9050919050565b7f63616e74206368616e6765207768696c652072656e7465640000000000000000600082015250565b6000613ae6601883612998565b9150613af182613ab0565b602082019050919050565b60006020820190508181036000830152613b1581613ad9565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613b78602583612998565b9150613b8382613b1c565b604082019050919050565b60006020820190508181036000830152613ba781613b6b565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613c0a602483612998565b9150613c1582613bae565b604082019050919050565b60006020820190508181036000830152613c3981613bfd565b9050919050565b6000613c4b82612a48565b9150613c5683612a48565b925082821015613c6957613c6861353e565b5b828203905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613caa602083612998565b9150613cb582613c74565b602082019050919050565b60006020820190508181036000830152613cd981613c9d565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613d16601c83612998565b9150613d2182613ce0565b602082019050919050565b60006020820190508181036000830152613d4581613d09565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613d82601983612998565b9150613d8d82613d4c565b602082019050919050565b60006020820190508181036000830152613db181613d75565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613e14603283612998565b9150613e1f82613db8565b604082019050919050565b60006020820190508181036000830152613e4381613e07565b9050919050565b6000613e5582612a48565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e8857613e8761353e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613ecd82612a48565b9150613ed883612a48565b925082613ee857613ee7613e93565b5b828204905092915050565b6000613efe82612a48565b9150613f0983612a48565b925082613f1957613f18613e93565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000613f7a82613f53565b613f848185613f5e565b9350613f948185602086016129a9565b613f9d816129dc565b840191505092915050565b6000608082019050613fbd6000830187612add565b613fca6020830186612add565b613fd76040830185612b73565b8181036060830152613fe98184613f6f565b905095945050505050565b600081519050614003816128fe565b92915050565b60006020828403121561401f5761401e6128c8565b5b600061402d84828501613ff4565b9150509291505056fea2646970667358221220a014a1c76c8263f2cca6336bdf8783b78f79ee4213adeb87cc477441ef1f9bff64736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c80636c5cad48116100ab578063b88d4fde1161006f578063b88d4fde14610409578063c2b7b86814610432578063c86c89211461045b578063c87b56dd14610484578063e9679937146104c1578063e985e9c5146104ea5761012a565b80636c5cad48146102fe57806370a082311461033b57806395d89b4114610378578063a22cb465146103a3578063b09afec1146103cc5761012a565b806323b872dd116100f257806323b872dd146102285780633ccfd60b1461025157806342842e0e146102685780634dc32a18146102915780636352211e146102c15761012a565b806301ffc9a71461012f57806306fdde031461016c578063081812fc14610197578063095ea7b3146101d457806312065fe0146101fd575b600080fd5b34801561013b57600080fd5b506101566004803603810190610151919061292a565b610527565b6040516101639190612972565b60405180910390f35b34801561017857600080fd5b50610181610609565b60405161018e9190612a26565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b99190612a7e565b61069b565b6040516101cb9190612aec565b60405180910390f35b3480156101e057600080fd5b506101fb60048036038101906101f69190612b33565b6106e1565b005b34801561020957600080fd5b506102126107f9565b60405161021f9190612b82565b60405180910390f35b34801561023457600080fd5b5061024f600480360381019061024a9190612b9d565b610840565b005b34801561025d57600080fd5b506102666108a0565b005b34801561027457600080fd5b5061028f600480360381019061028a9190612b9d565b610a28565b005b6102ab60048036038101906102a69190612c2e565b610a48565b6040516102b89190612b82565b60405180910390f35b3480156102cd57600080fd5b506102e860048036038101906102e39190612a7e565b610daf565b6040516102f59190612aec565b60405180910390f35b34801561030a57600080fd5b5061032560048036038101906103209190612c81565b610e61565b6040516103329190612d21565b60405180910390f35b34801561034757600080fd5b50610362600480360381019061035d9190612d3c565b610efb565b60405161036f9190612b82565b60405180910390f35b34801561038457600080fd5b5061038d610fb3565b60405161039a9190612a26565b60405180910390f35b3480156103af57600080fd5b506103ca60048036038101906103c59190612d95565b611045565b005b3480156103d857600080fd5b506103f360048036038101906103ee9190612a7e565b61105b565b6040516104009190612ee9565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b9190613039565b61114b565b005b34801561043e57600080fd5b5061045960048036038101906104549190612a7e565b6111ad565b005b34801561046757600080fd5b50610482600480360381019061047d9190612a7e565b611570565b005b34801561049057600080fd5b506104ab60048036038101906104a69190612a7e565b611925565b6040516104b89190612a26565b60405180910390f35b3480156104cd57600080fd5b506104e860048036038101906104e391906130bc565b61198d565b005b3480156104f657600080fd5b50610511600480360381019061050c9190613137565b611bc1565b60405161051e9190612972565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105f257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610602575061060182611c55565b5b9050919050565b606060008054610618906131a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610644906131a6565b80156106915780601f1061066657610100808354040283529160200191610691565b820191906000526020600020905b81548152906001019060200180831161067457829003601f168201915b5050505050905090565b60006106a682611cbf565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106ec82610daf565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561075d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107549061324a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661077c611d0a565b73ffffffffffffffffffffffffffffffffffffffff1614806107ab57506107aa816107a5611d0a565b611bc1565b5b6107ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e1906132dc565b60405180910390fd5b6107f48383611d12565b505050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b61085161084b611d0a565b82611dcb565b610890576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108879061336e565b60405180910390fd5b61089b838383611e60565b505050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610922576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610919906133da565b60405180910390fd5b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050905080610a24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1b90613446565b60405180910390fd5b5050565b610a438383836040518060200160405280600081525061114b565b505050565b600080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000209050600115158160000160009054906101000a900460ff16151514610af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aec906134b2565b60405180910390fd5b6000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000205414610b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7f9061351e565b60405180910390fd5b6000816001015484610b9a919061356d565b90506000826002015485610bae919061356d565b90508082610bbc91906135c7565b341015610bfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf590613669565b60405180910390fd5b610c0860066120c7565b6000610c1460066120dd565b905060006040518060e001604052804281526020018842610c3591906135c7565b81526020018a73ffffffffffffffffffffffffffffffffffffffff16815260200189815260200185815260200184815260200160016003811115610c7c57610c7b612de4565b5b815250905081600860008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a81526020019081526020016000208190555080600a6000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548160ff02191690836003811115610d8e57610d8d612de4565b5b0217905550905050610da033896120eb565b81955050505050509392505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4f906136d5565b60405180910390fd5b80915050919050565b610e69612836565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff1615151515815260200160018201548152602001600282015481525050905092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6390613767565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610fc2906131a6565b80601f0160208091040260200160405190810160405280929190818152602001828054610fee906131a6565b801561103b5780601f106110105761010080835404028352916020019161103b565b820191906000526020600020905b81548152906001019060200180831161101e57829003601f168201915b5050505050905090565b611057611050611d0a565b83836122c5565b5050565b611063612859565b600a60008381526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900460ff16600381111561112e5761112d612de4565b5b60038111156111405761113f612de4565b5b815250509050919050565b61115c611156611d0a565b83611dcb565b61119b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111929061336e565b60405180910390fd5b6111a784848484612432565b50505050565b6000600a60008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124f906137d3565b60405180910390fd5b6002600381111561126c5761126b612de4565b5b8160060160009054906101000a900460ff1660038111156112905761128f612de4565b5b146112d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c79061383f565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5a21a2e846040518263ffffffff1660e01b815260040161132d9190612b82565b602060405180830381600087803b15801561134757600080fd5b505af115801561135b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137f9190613874565b905080156113f457600061139284610daf565b90508260050154600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113e791906135c7565b9250508190555050611505565b60008260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e84600301546040518263ffffffff1660e01b81526004016114579190612b82565b60206040518083038186803b15801561146f57600080fd5b505afa158015611483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a791906138b6565b90508260050154600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114fc91906135c7565b92505081905550505b7faa76612075dcf5624c76b21b3b0f6babbeee4e6b6197fb4fb4a2a5654724812a83826040516115369291906138e3565b60405180910390a160038260060160006101000a81548160ff0219169083600381111561156657611565612de4565b5b0217905550505050565b6000600a60008381526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561161b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611612906137d3565b60405180910390fd5b6001600381111561162f5761162e612de4565b5b8160060160009054906101000a900460ff16600381111561165357611652612de4565b5b14611693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168a90613958565b60405180910390fd5b806001015442116116d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d0906139c4565b60405180910390fd5b60028160060160006101000a81548160ff0219169083600381111561170157611700612de4565b5b02179055506000600860008360020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836003015481526020019081526020016000208190555060008160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e83600301546040518263ffffffff1660e01b81526004016117e79190612b82565b60206040518083038186803b1580156117ff57600080fd5b505afa158015611813573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183791906138b6565b90508160040154600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461188c91906135c7565b92505081905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd9db427846040518263ffffffff1660e01b81526004016118ee9190612b82565b600060405180830381600087803b15801561190857600080fd5b505af115801561191c573d6000803e3d6000fd5b50505050505050565b606061193082611cbf565b600061193a61248e565b9050600081511161195a5760405180602001604052806000815250611985565b80611964846124a5565b604051602001611975929190613a20565b6040516020818303038152906040525b915050919050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16636352211e866040518263ffffffff1660e01b81526004016119dd9190612b82565b60206040518083038186803b1580156119f557600080fd5b505afa158015611a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2d91906138b6565b73ffffffffffffffffffffffffffffffffffffffff1614611a83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7a90613a90565b60405180910390fd5b6000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000205414611b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0d90613afc565b60405180910390fd5b6040518060600160405280841515815260200183815260200182815250600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600086815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160010155604082015181600201559050505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611cc881612606565b611d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cfe906136d5565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611d8583610daf565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611dd783610daf565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611e195750611e188185611bc1565b5b80611e5757508373ffffffffffffffffffffffffffffffffffffffff16611e3f8461069b565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611e8082610daf565b73ffffffffffffffffffffffffffffffffffffffff1614611ed6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecd90613b8e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3d90613c20565b60405180910390fd5b611f51838383612672565b611f5c600082611d12565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fac9190613c40565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461200391906135c7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120c2838383612677565b505050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561215b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215290613cc0565b60405180910390fd5b61216481612606565b156121a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219b90613d2c565b60405180910390fd5b6121b060008383612672565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461220091906135c7565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46122c160008383612677565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612334576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232b90613d98565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516124259190612972565b60405180910390a3505050565b61243d848484611e60565b6124498484848461267c565b612488576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247f90613e2a565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606060008214156124ed576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612601565b600082905060005b6000821461251f57808061250890613e4a565b915050600a826125189190613ec2565b91506124f5565b60008167ffffffffffffffff81111561253b5761253a612f0e565b5b6040519080825280601f01601f19166020018201604052801561256d5781602001600182028036833780820191505090505b5090505b600085146125fa576001826125869190613c40565b9150600a856125959190613ef3565b60306125a191906135c7565b60f81b8183815181106125b7576125b6613f24565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856125f39190613ec2565b9450612571565b8093505050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b600061269d8473ffffffffffffffffffffffffffffffffffffffff16612813565b15612806578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026126c6611d0a565b8786866040518563ffffffff1660e01b81526004016126e89493929190613fa8565b602060405180830381600087803b15801561270257600080fd5b505af192505050801561273357506040513d601f19601f820116820180604052508101906127309190614009565b60015b6127b6573d8060008114612763576040519150601f19603f3d011682016040523d82523d6000602084013e612768565b606091505b506000815114156127ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a590613e2a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061280b565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b604051806060016040528060001515815260200160008152602001600081525090565b6040518060e001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600060038111156128b8576128b7612de4565b5b81525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612907816128d2565b811461291257600080fd5b50565b600081359050612924816128fe565b92915050565b6000602082840312156129405761293f6128c8565b5b600061294e84828501612915565b91505092915050565b60008115159050919050565b61296c81612957565b82525050565b60006020820190506129876000830184612963565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156129c75780820151818401526020810190506129ac565b838111156129d6576000848401525b50505050565b6000601f19601f8301169050919050565b60006129f88261298d565b612a028185612998565b9350612a128185602086016129a9565b612a1b816129dc565b840191505092915050565b60006020820190508181036000830152612a4081846129ed565b905092915050565b6000819050919050565b612a5b81612a48565b8114612a6657600080fd5b50565b600081359050612a7881612a52565b92915050565b600060208284031215612a9457612a936128c8565b5b6000612aa284828501612a69565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ad682612aab565b9050919050565b612ae681612acb565b82525050565b6000602082019050612b016000830184612add565b92915050565b612b1081612acb565b8114612b1b57600080fd5b50565b600081359050612b2d81612b07565b92915050565b60008060408385031215612b4a57612b496128c8565b5b6000612b5885828601612b1e565b9250506020612b6985828601612a69565b9150509250929050565b612b7c81612a48565b82525050565b6000602082019050612b976000830184612b73565b92915050565b600080600060608486031215612bb657612bb56128c8565b5b6000612bc486828701612b1e565b9350506020612bd586828701612b1e565b9250506040612be686828701612a69565b9150509250925092565b6000612bfb82612acb565b9050919050565b612c0b81612bf0565b8114612c1657600080fd5b50565b600081359050612c2881612c02565b92915050565b600080600060608486031215612c4757612c466128c8565b5b6000612c5586828701612c19565b9350506020612c6686828701612a69565b9250506040612c7786828701612a69565b9150509250925092565b60008060408385031215612c9857612c976128c8565b5b6000612ca685828601612c19565b9250506020612cb785828601612a69565b9150509250929050565b612cca81612957565b82525050565b612cd981612a48565b82525050565b606082016000820151612cf56000850182612cc1565b506020820151612d086020850182612cd0565b506040820151612d1b6040850182612cd0565b50505050565b6000606082019050612d366000830184612cdf565b92915050565b600060208284031215612d5257612d516128c8565b5b6000612d6084828501612b1e565b91505092915050565b612d7281612957565b8114612d7d57600080fd5b50565b600081359050612d8f81612d69565b92915050565b60008060408385031215612dac57612dab6128c8565b5b6000612dba85828601612b1e565b9250506020612dcb85828601612d80565b9150509250929050565b612dde81612acb565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110612e2457612e23612de4565b5b50565b6000819050612e3582612e13565b919050565b6000612e4582612e27565b9050919050565b612e5581612e3a565b82525050565b60e082016000820151612e716000850182612cd0565b506020820151612e846020850182612cd0565b506040820151612e976040850182612dd5565b506060820151612eaa6060850182612cd0565b506080820151612ebd6080850182612cd0565b5060a0820151612ed060a0850182612cd0565b5060c0820151612ee360c0850182612e4c565b50505050565b600060e082019050612efe6000830184612e5b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f46826129dc565b810181811067ffffffffffffffff82111715612f6557612f64612f0e565b5b80604052505050565b6000612f786128be565b9050612f848282612f3d565b919050565b600067ffffffffffffffff821115612fa457612fa3612f0e565b5b612fad826129dc565b9050602081019050919050565b82818337600083830152505050565b6000612fdc612fd784612f89565b612f6e565b905082815260208101848484011115612ff857612ff7612f09565b5b613003848285612fba565b509392505050565b600082601f8301126130205761301f612f04565b5b8135613030848260208601612fc9565b91505092915050565b60008060008060808587031215613053576130526128c8565b5b600061306187828801612b1e565b945050602061307287828801612b1e565b935050604061308387828801612a69565b925050606085013567ffffffffffffffff8111156130a4576130a36128cd565b5b6130b08782880161300b565b91505092959194509250565b600080600080600060a086880312156130d8576130d76128c8565b5b60006130e688828901612c19565b95505060206130f788828901612a69565b945050604061310888828901612d80565b935050606061311988828901612a69565b925050608061312a88828901612a69565b9150509295509295909350565b6000806040838503121561314e5761314d6128c8565b5b600061315c85828601612b1e565b925050602061316d85828601612b1e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806131be57607f821691505b602082108114156131d2576131d1613177565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613234602183612998565b915061323f826131d8565b604082019050919050565b6000602082019050818103600083015261326381613227565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b60006132c6603e83612998565b91506132d18261326a565b604082019050919050565b600060208201905081810360008301526132f5816132b9565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000613358602e83612998565b9150613363826132fc565b604082019050919050565b600060208201905081810360008301526133878161334b565b9050919050565b7f656d7074792062616c616e636500000000000000000000000000000000000000600082015250565b60006133c4600d83612998565b91506133cf8261338e565b602082019050919050565b600060208201905081810360008301526133f3816133b7565b9050919050565b7f6661696c656420746f2077697468647261770000000000000000000000000000600082015250565b6000613430601283612998565b915061343b826133fa565b602082019050919050565b6000602082019050818103600083015261345f81613423565b9050919050565b7f63616e742072656e74207468697320746f6b656e000000000000000000000000600082015250565b600061349c601483612998565b91506134a782613466565b602082019050919050565b600060208201905081810360008301526134cb8161348f565b9050919050565b7f616c72656164792072656e746564000000000000000000000000000000000000600082015250565b6000613508600e83612998565b9150613513826134d2565b602082019050919050565b60006020820190508181036000830152613537816134fb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061357882612a48565b915061358383612a48565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156135bc576135bb61353e565b5b828202905092915050565b60006135d282612a48565b91506135dd83612a48565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156136125761361161353e565b5b828201905092915050565b7f6d73672e76616c756520746f6f206c6f77000000000000000000000000000000600082015250565b6000613653601183612998565b915061365e8261361d565b602082019050919050565b6000602082019050818103600083015261368281613646565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006136bf601883612998565b91506136ca82613689565b602082019050919050565b600060208201905081810360008301526136ee816136b2565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613751602983612998565b915061375c826136f5565b604082019050919050565b6000602082019050818103600083015261378081613744565b9050919050565b7f746f6b656e20646f6573206e6f74206578697374000000000000000000000000600082015250565b60006137bd601483612998565b91506137c882613787565b602082019050919050565b600060208201905081810360008301526137ec816137b0565b9050919050565b7f6e6f7420696e2066696e69736865642073746174757300000000000000000000600082015250565b6000613829601683612998565b9150613834826137f3565b602082019050919050565b600060208201905081810360008301526138588161381c565b9050919050565b60008151905061386e81612d69565b92915050565b60006020828403121561388a576138896128c8565b5b60006138988482850161385f565b91505092915050565b6000815190506138b081612b07565b92915050565b6000602082840312156138cc576138cb6128c8565b5b60006138da848285016138a1565b91505092915050565b60006040820190506138f86000830185612b73565b6139056020830184612963565b9392505050565b7f616c72656164792066696e697368656400000000000000000000000000000000600082015250565b6000613942601083612998565b915061394d8261390c565b602082019050919050565b6000602082019050818103600083015261397181613935565b9050919050565b7f72656e74206e6f742066696e6973686564207965740000000000000000000000600082015250565b60006139ae601583612998565b91506139b982613978565b602082019050919050565b600060208201905081810360008301526139dd816139a1565b9050919050565b600081905092915050565b60006139fa8261298d565b613a0481856139e4565b9350613a148185602086016129a9565b80840191505092915050565b6000613a2c82856139ef565b9150613a3882846139ef565b91508190509392505050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000613a7a600983612998565b9150613a8582613a44565b602082019050919050565b60006020820190508181036000830152613aa981613a6d565b9050919050565b7f63616e74206368616e6765207768696c652072656e7465640000000000000000600082015250565b6000613ae6601883612998565b9150613af182613ab0565b602082019050919050565b60006020820190508181036000830152613b1581613ad9565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613b78602583612998565b9150613b8382613b1c565b604082019050919050565b60006020820190508181036000830152613ba781613b6b565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613c0a602483612998565b9150613c1582613bae565b604082019050919050565b60006020820190508181036000830152613c3981613bfd565b9050919050565b6000613c4b82612a48565b9150613c5683612a48565b925082821015613c6957613c6861353e565b5b828203905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613caa602083612998565b9150613cb582613c74565b602082019050919050565b60006020820190508181036000830152613cd981613c9d565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000613d16601c83612998565b9150613d2182613ce0565b602082019050919050565b60006020820190508181036000830152613d4581613d09565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613d82601983612998565b9150613d8d82613d4c565b602082019050919050565b60006020820190508181036000830152613db181613d75565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000613e14603283612998565b9150613e1f82613db8565b604082019050919050565b60006020820190508181036000830152613e4381613e07565b9050919050565b6000613e5582612a48565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613e8857613e8761353e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613ecd82612a48565b9150613ed883612a48565b925082613ee857613ee7613e93565b5b828204905092915050565b6000613efe82612a48565b9150613f0983612a48565b925082613f1957613f18613e93565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000613f7a82613f53565b613f848185613f5e565b9350613f948185602086016129a9565b613f9d816129dc565b840191505092915050565b6000608082019050613fbd6000830187612add565b613fca6020830186612add565b613fd76040830185612b73565b8181036060830152613fe98184613f6f565b905095945050505050565b600081519050614003816128fe565b92915050565b60006020828403121561401f5761401e6128c8565b5b600061402d84828501613ff4565b9150509291505056fea2646970667358221220a014a1c76c8263f2cca6336bdf8783b78f79ee4213adeb87cc477441ef1f9bff64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 103,
        "contract": "contracts/ERC721Rent.sol:ERC721Rent",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 105,
        "contract": "contracts/ERC721Rent.sol:ERC721Rent",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 109,
        "contract": "contracts/ERC721Rent.sol:ERC721Rent",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 113,
        "contract": "contracts/ERC721Rent.sol:ERC721Rent",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 117,
        "contract": "contracts/ERC721Rent.sol:ERC721Rent",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 123,
        "contract": "contracts/ERC721Rent.sol:ERC721Rent",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2340,
        "contract": "contracts/ERC721Rent.sol:ERC721Rent",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Counter)1428_storage"
      },
      {
        "astId": 2347,
        "contract": "contracts/ERC721Rent.sol:ERC721Rent",
        "label": "_rentConditions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RentConditions)2834_storage))"
      },
      {
        "astId": 2353,
        "contract": "contracts/ERC721Rent.sol:ERC721Rent",
        "label": "_currentRentingToken",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2357,
        "contract": "contracts/ERC721Rent.sol:ERC721Rent",
        "label": "_balances",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2362,
        "contract": "contracts/ERC721Rent.sol:ERC721Rent",
        "label": "_tokenData",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Rent)2855_storage)"
      },
      {
        "astId": 2365,
        "contract": "contracts/ERC721Rent.sol:ERC721Rent",
        "label": "_resolver",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IDisputeResolver)2932"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDisputeResolver)2932": {
        "encoding": "inplace",
        "label": "contract IDisputeResolver",
        "numberOfBytes": "20"
      },
      "t_enum(RentStatus)2839": {
        "encoding": "inplace",
        "label": "enum IERC721Rent.RentStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(RentConditions)2834_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct IERC721Rent.RentConditions))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(RentConditions)2834_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Rent)2855_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IERC721Rent.Rent)",
        "numberOfBytes": "32",
        "value": "t_struct(Rent)2855_storage"
      },
      "t_mapping(t_uint256,t_struct(RentConditions)2834_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IERC721Rent.RentConditions)",
        "numberOfBytes": "32",
        "value": "t_struct(RentConditions)2834_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1428_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1427,
            "contract": "contracts/ERC721Rent.sol:ERC721Rent",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Rent)2855_storage": {
        "encoding": "inplace",
        "label": "struct IERC721Rent.Rent",
        "members": [
          {
            "astId": 2841,
            "contract": "contracts/ERC721Rent.sol:ERC721Rent",
            "label": "startTs",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2843,
            "contract": "contracts/ERC721Rent.sol:ERC721Rent",
            "label": "endTs",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2845,
            "contract": "contracts/ERC721Rent.sol:ERC721Rent",
            "label": "sourceERC721Contract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2847,
            "contract": "contracts/ERC721Rent.sol:ERC721Rent",
            "label": "sourceTokenId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2849,
            "contract": "contracts/ERC721Rent.sol:ERC721Rent",
            "label": "price",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2851,
            "contract": "contracts/ERC721Rent.sol:ERC721Rent",
            "label": "collateral",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2854,
            "contract": "contracts/ERC721Rent.sol:ERC721Rent",
            "label": "status",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(RentStatus)2839"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(RentConditions)2834_storage": {
        "encoding": "inplace",
        "label": "struct IERC721Rent.RentConditions",
        "members": [
          {
            "astId": 2829,
            "contract": "contracts/ERC721Rent.sol:ERC721Rent",
            "label": "allowed",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2831,
            "contract": "contracts/ERC721Rent.sol:ERC721Rent",
            "label": "pricePerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2833,
            "contract": "contracts/ERC721Rent.sol:ERC721Rent",
            "label": "collateralPerSecond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}